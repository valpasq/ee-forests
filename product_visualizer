// DATASET EXPLORER (v5)
// Last updated: 2023-07-04
// BEN GLASS, VALERIE PASQUARELLA

//==================
//  CONFIG
//================== 

var CITATION_LABEL = 'Research and UI Development by Ben Glass and Valerie Pasquarella. ' + 
    'Version 5.0, July 2023.';

var utils = require('users/valeriepasquarella/ee-forests:utils.js');
var config = require('users/valeriepasquarella/ee-forests:config.js');

// Assets directory with tables by state.
var TABLES_DIR = 'projects/ee-forests/assets/v5-0_merged/v5-0_merged_';

// Collection with pre-computed forest masks.
var MASK_COLLECTION_ID = 'projects/sites-project/forest-dataset-comparison/v5-0_datasets';

// Multiply by m2.
var SCALE_FACTOR = 1;

// Output projection for reductions.
var OUT_PROJ = 'EPSG:5070';

// State boundaries asset.
var TIGER = 'TIGER/2018/States';

// Get visualization properties for additional FIA datasets.
var FIA_config = config.FIA_DICT;

//======================
//  MASK PRE-PROCESSING
//======================

// Convert dictionary to feature collection.
function dict_to_fc(key, value) {
  return ee.Feature(null, value);
}

// Get summary dict from config.js.
var summary_dict = config.SUMMARY_DICT;

// Convert to fc.
var summary_fc = ee.FeatureCollection(
    summary_dict.map(dict_to_fc).values());

// Get IC with mask results (pre-computed).
var masks = ee.ImageCollection(MASK_COLLECTION_ID);

//==================
//  VIS PARAMS
//==================

// Colors for widget styling.
var COLORS = {
    forestgreen: '07783e',
    offwhite: 'FFFAF1',
    transparent: 'rgba(255, 255, 255, 0)',
    semitransparent: 'rgba(255, 255, 255, 0.9)'
};

// Visualization parameters for mapped results.
var FOREST_VIZ = {
    min: 0,
    max: 1, 
    palette:['000000', COLORS.forestgreen]
};

// Lable styling. 
var BASIC_LABEL_STYLE = {
    fontSize: '13px',
    backgroundColor: COLORS.transparent
};
  
var BOLD_LABEL_STYLE = {
    fontWeight: 'bold',
    fontSize: '14px',
    backgroundColor: COLORS.transparent
};

var HEADER_LABEL_STYLE = {
    fontWeight: 'bold',
    fontSize: '18px',
    backgroundColor: COLORS.transparent
};

//===================
// INSTRUCTIONS PANEL
//===================

// Set up main panel (left-hand side of App).
var master_panel = ui.Panel({
  style: {
      width: '25%',
      backgroundColor: COLORS.semitransparent,
      border: '2px solid #d3d3d3',
      padding: '10px'
  }
});

var master_panel_label = ui.Label({
    value: 'Forest Dataset Explorer (Beta)',
    style: HEADER_LABEL_STYLE
});

var instruct_label = ui.Label({
    value: 'Compare forested area (based on pixel counts) for CONUS from different ' +
        'remote sensing datasets using the split panel and selection ' +
        'widgets. Use pull-down below to chart how all forest datasets ' +
        'differ over time for a specific state.',
    style: BASIC_LABEL_STYLE
});

// Setup subpanel with options to select basemap style.
var basemap_select_panel = ui.Panel({
    style: {
        position: 'middle-right',
        backgroundColor: COLORS.semitransparent
    },
    layout: ui.Panel.Layout.flow('horizontal')
});

var basemap_label = ui.Label({
    value: 'Basemap:',
    style: BOLD_LABEL_STYLE
});

var dark_checkbox = ui.Checkbox({
    label: 'Dark', 
    value: true,
    onChange: function(checked) {
      if (checked === true) { 
        LeftMap.setOptions('Dark', {Dark: stylers.dark_mode});
        RightMap.setOptions('Dark', {Dark: stylers.dark_mode});
        map_checkbox.setValue(false);
        satellite_checkbox.setValue(false);
      } else if ((map_checkbox.getValue() === false) & (satellite_checkbox.getValue() === false)) {
        dark_checkbox.setValue(true);
      }
    }
});

var map_checkbox = ui.Checkbox({
    label: 'Map', 
    value: false,
    onChange: function(checked) {
      if (checked === true) { 
        LeftMap.setOptions('ROADMAP');
        RightMap.setOptions('ROADMAP');
        dark_checkbox.setValue(false);
        satellite_checkbox.setValue(false);
      } else if ((dark_checkbox.getValue() === false) & (satellite_checkbox.getValue() === false)) {
        map_checkbox.setValue(true);
      }
    }
});

var satellite_checkbox = ui.Checkbox({
    label: 'Satellite', 
    value: false,
    onChange: function(checked) {
      if (checked === true) { 
        LeftMap.setOptions('SATELLITE');
        RightMap.setOptions('SATELLITE');
        map_checkbox.setValue(false);
        dark_checkbox.setValue(false);
      } else if ((dark_checkbox.getValue() === false) & (map_checkbox.getValue() === false)) {
        satellite_checkbox.setValue(true);
      }
    }
});

basemap_select_panel
    .add(basemap_label)
    .add(dark_checkbox)
    .add(map_checkbox)
    .add(satellite_checkbox);

master_panel
    .add(master_panel_label)
    .add(instruct_label)
    .add(basemap_select_panel);

//=======================
//  CHART WIDGET
//=======================

var chart_panel = ui.Panel({
      style: {
        height: '400px',
        position: 'bottom-left',
        backgroundColor: 'rgba(255, 255, 255, 0.9)'
      }
});

var chart_palette = summary_dict
    .combine(FIA_config)
    .map(function(k, v) {return ee.Dictionary(v).get('color')})
    .values()
    .getInfo();

function years_dict(start_inc, end_inc) {
  var out = {};
  for (var i = start_inc; i <= end_inc; ++i) {
    out[i] = i; 
  }
  return out;
}
var chart_xlabels = years_dict(1985, 2020);

var chart_select_panel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
});

var chart_select_label = ui.Label({
  value: 'Forest area chart:',
  style: BOLD_LABEL_STYLE
});

// Create time series chart for selected state
var select_button = ui.Select({
  items: Object.keys(config.STATES_DICT),
  placeholder: 'Select state',
  style: {stretch: 'horizontal'},
  onChange: function(key) {
    var state = config.STATES_DICT[key];

    if (state !== 'CONUS') {
      var bounds = ee.FeatureCollection(TIGER)
          .filter(ee.Filter.inList('STUSPS', [state]));
  
      var FCP_table = ee.FeatureCollection(TABLES_DIR + state)
        .sort('dataset_id');
        
      LeftMap.centerObject(bounds);
    }
    else {
      var conus = Object.keys(config.STATES_DICT).map(function(key){
          return config.STATES_DICT[key];});
          
      var bounds = ee.FeatureCollection(TIGER)
        .filter(ee.Filter.inList('STUSPS', conus))
      
      var FCP_table = ee.FeatureCollection(TABLES_DIR + 'CONUS_noFIA')
        .sort('dataset_id');
      
      LeftMap.setCenter(-98.55653, 39.80988, 4);
    }
    
    LeftMap.layers().set(1, ui.Map.Layer(ee.Image().paint(bounds, 0, 2), {palette: ['white']}));
    RightMap.layers().set(1, ui.Map.Layer(ee.Image().paint(bounds, 0, 2), {palette: ['white']}));
    

    // Add "dummy" column to feature collection.
    var addDummy = function(feature) {
      return feature.set({0: 0});
    };
    FCP_table = FCP_table
        .map(addDummy);
    
    var FCP_chart = ui.Chart.feature
                        .byProperty({
                            features: FCP_table,
                            xProperties: chart_xlabels,
                            seriesProperty: 'dataset_id'
                        })
                        .setChartType('ScatterChart');
    
    var FCP_chart_styling = {
        title: ee.String(key).getInfo(),
        hAxis: {
            title: 'Year',
            ticks: chart_xlabels,
            titleTextStyle: {italic: false, bold: false},
            gridlines: {color: 'DEDEDE'},
            format: '####'
        },
        vAxis: {
            title: 'Area based on pixel counts (sq. meters)',
            titleTextStyle: {italic: false, bold: false},
            gridlines: {color: 'DEDEDE'},
            format: '#####'
        },
        colors: chart_palette,
        lineSize: 3,
        pointSize: 3,
        width: 1000,
        height: 400,
        padding: '0px',
        margin: '0px',
        interpolateNulls: true,
        chartArea: {backgroundColor: 'rgba(255, 255, 255, 0.9)'}
    };

    FCP_chart.setOptions(FCP_chart_styling);

    chart_panel.clear();
    chart_panel.add(FCP_chart);
    add_reset_button(chart_panel, 'bottom-left', 1);
  }
});

chart_select_panel.add(chart_select_label).add(select_button);

// Add chart widgets to master panel.
master_panel.add(chart_select_panel);
master_panel.add(chart_panel);

// Add citation for app.
var citation_label = ui.Label({
    value: CITATION_LABEL,
    style: BASIC_LABEL_STYLE
});

master_panel.add(citation_label);


//==========================
// DATASET SELECTION WIDGETS
//==========================

function select_year(dataset_key, map_panel, years_dict) {
  return function(year_key) {
    // Reset layers
    map_panel.layers().set(0, null);
    
    var DATASET_ID = dataset_key;
    var YEAR = years_dict.get(year_key);
    
    var masks_filt = ee.ImageCollection(masks)
        .filterMetadata('dataset_id', 'equals', DATASET_ID)
        .filterMetadata('year', 'equals', ee.String(YEAR))
        .first()
        .selfMask();

    // Add dataset for selected year.
    map_panel.layers().set(0, ui.Map.Layer(masks_filt, FOREST_VIZ, DATASET_ID + ' (' + YEAR + ')', 1));
  };
}

function select_dataset(select_dataset_button, ui_panel, map_panel) {
  return function(dataset_key) {
    map_panel.layers().set(0, null);
    
    var dataset_dict = ee.Dictionary(summary_dict.get(dataset_key));
    
    // Get available years for selected dataset.
    var years_list = dataset_dict.get('years');
    
    // Wrangling.
    var years_string = ee.List(years_list).map(function(year) {
      return(ee.String(year));
    });
    var years_dict = ee.Dictionary.fromLists(years_string, years_list);
    
    // Get dataset description.
    var dataset_description = ui.Label({
        value: dataset_dict.get('description').getInfo(),
        style: BASIC_LABEL_STYLE
    });
    
    // Put the available years in a nested select button.
    var select_year_button = ui.Select({
        items: Object.keys(years_dict.getInfo()),
        placeholder: 'Choose year available',
        onChange: select_year(dataset_key, map_panel, years_dict)
    });
      
    // Clear panel for new searches.
    ui_panel.clear();
    ui_panel.add(select_dataset_button);
    ui_panel.add(select_year_button);
    ui_panel.add(dataset_description);

  };
}

// Function to build dataset selection panels.
function build_dataset_panel(map_panel, panel_location) {

  var dataset_panel = ui.Panel({
    style: {
        width: '210px',
        position: panel_location,
        backgroundColor: COLORS.semitransparent
    }
  });
  
  map_panel.add(dataset_panel);
  
  var select_dataset_button = ui.Select({
      items: Object.keys(summary_dict.getInfo()),
      placeholder: 'Choose dataset',
  });
  
  select_dataset_button
      .onChange(select_dataset(select_dataset_button, dataset_panel, map_panel));
  
  return dataset_panel.add(select_dataset_button);
}

// Initialize left and right maps for split panel.
var RightMap = ui.Map();
var LeftMap = ui.Map();


function add_reset_button(map_panel, button_location, layer_index) { 
  var reset_button = ui.Button({
      label: 'Clear',
      style: {
        position: button_location,
        backgroundColor: COLORS.transparent
      },
      onClick: function() {
        map_panel.layers().set(layer_index, null);
        map_panel.remove(map_panel.widgets().get(1));
        build_dataset_panel(map_panel, button_location);
      }
  });
  return map_panel.add(reset_button);
}

add_reset_button(LeftMap, 'bottom-left', 0);
add_reset_button(RightMap, 'bottom-right', 0);

// Generate selection panels for right and left maps panels.
build_dataset_panel(LeftMap, 'bottom-left');
build_dataset_panel(RightMap, 'bottom-right');


//=======================================
//  LINKING MASTER PANEL AND SPLIT PANELS
//=======================================

// Link the right and left Maps.
var linker = ui.Map.Linker([LeftMap, RightMap]);

// Create a SplitPanel which holds the linked maps side-by-side.
var splitPanel = ui.SplitPanel({
    firstPanel: linker.get(0),
    secondPanel: linker.get(1),
    orientation: 'horizontal',
    wipe: true,
    style: {stretch: 'both'}
});

// Add "dark mode" basemap style.
var stylers = require('users/valeriepasquarella/shared:map_stylers');
LeftMap.setOptions('Dark', {Dark: stylers.dark_mode});
RightMap.setOptions('Dark', {Dark: stylers.dark_mode});

LeftMap.layers().set(0, null);
RightMap.layers().set(0, null);

// Set Map controls.
var MAP_CONTROL_DICT = {
    zoomControl: true,
    mapTypeControl: false,
    drawingToolsControl: false,
    layerList: false,
    fullscreenControl: true
};

RightMap.setControlVisibility(MAP_CONTROL_DICT);
LeftMap.setControlVisibility(MAP_CONTROL_DICT);

// Set the SplitPanel as the only thing in root.
ui.root.clear();
ui.root.insert(0, master_panel);
ui.root.insert(1, splitPanel);