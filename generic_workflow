/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-99.5505859375, 37.14691772900527],
          [-99.5505859375, 25.308969925079772],
          [-92.87089843750002, 25.308969925079772],
          [-92.87089843750002, 37.14691772900527]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var utils = require('users/valeriepasquarella/ee-forests:utils.js');
var config = require('users/valeriepasquarella/ee-forests:config.js');

// State boundaries asset.
var TIGER = 'TIGER/2018/States';

// Area to summarize over (list of states).
// Note: Texas is divided into TX-1 and TX-2.
var STATES = ['ME', 'VT', 'NH', 'MA', 'CT', 'RI', 'NY', 'NJ', 'PA', 'MD', 
            'DE', 'WV', 'VA', 'NC', 'SC', 'GA', 'FL', 'AL', 'TN', 'KY',
            'IN', 'OH', 'MI', 'WI', 'IL', 'MO', 'AR', 'MS', 'LA', 'IA',
            'MN', 'ND', 'SD', 'NE', 'KS', 'OK', 'NM', 'CO', 'WY', 'MT',
            'ID', 'UT', 'AZ', 'NV', 'CA', 'OR', 'WA', 'TX-1', 'TX-2'];


var VERSION = 'v5-0';

// Directory name for Drive exports.
var DRIVE_DIR = 'ee-fpc';

// Scale factor (multiplied by m2).
var SCALE_FACTOR = 1;

// Output projection for reductions.
var OUT_PROJ = 'EPSG:5070';


// Convert dictionary to feature collection.
function dict_to_fc(key, value) {
  return ee.Feature(null, value);
  
}

// Run forest area summaries for ROI.
function summary_table_fn(feature) {
  var mask_collection = ee.ImageCollection(
      feature.get('mask_collection'));
      
  var bounds = ee.FeatureCollection(feature.get('bounds')).geometry();
  var proj = ee.Projection(feature.get('projection'));
  var pixel_size = feature.getNumber('pixel_size');
  var conversion = feature.getNumber('conversion');
  var dataset = feature.get('dataset_id');
  
  var summaries = mask_collection.map(function(image) { 
    var summary = ee.Image(image)
        .reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: bounds,
            crs: proj,
            scale: pixel_size,
            maxPixels: 1e20});
            
    var area_int = ee.Number(summary.get('forest_area'))
        .multiply(conversion)
        .int64();
    
    summary = summary.set('forest_area', area_int);
    
    return ee.Feature(null, summary)
        .setMulti({
          'dataset_id': dataset,
          'year': image.get('year')
          });
  });
  
  return ee.Feature(
      null, 
      {'dataset_id': dataset, 
       'year_summaries': ee.FeatureCollection(summaries)});
}

// Format feature collection for export.
function featurify_fn(f) {
  f = ee.Feature(f);
  var dataset_id = f.getString('dataset_id');
  var summaries = ee.FeatureCollection(f.get('year_summaries'));
  var summaries_w_string_year = summaries.map(function(summary) {
        return summary.set('year', ee.String(summary.getNumber('year').toInt()));
      });
  
  var years = summaries_w_string_year.aggregate_array('year');
  var areas = summaries_w_string_year.aggregate_array('forest_area');
  var properties = ee.Dictionary.fromLists(years, areas);
  
  return ee.Feature(
      bounds.geometry(), 
      properties
          .set('dataset_id', dataset_id)
          .set('state', state));
}

for (var s = 0; s < STATES.length; s++){
  var state = STATES[s];
  
  // Get state(s) to reduce over.
  if (state === 'TX-1') {
    var bounds = ee.FeatureCollection(
      ee.Feature(ee.FeatureCollection(TIGER)
        .filter(ee.Filter.inList('STUSPS', ['TX']))
        .first())
        .intersection(geometry, 1));
  } else if (state === 'TX-2') {
    var bounds = ee.FeatureCollection(
      ee.Feature(ee.FeatureCollection(TIGER)
        .filter(ee.Filter.inList('STUSPS', ['TX']))
        .first())
        .difference(geometry, 1));
  } else {
    var bounds = ee.FeatureCollection(TIGER)
        .filter(ee.Filter.inList('STUSPS', [state]));
  }
  
  Map.addLayer(bounds);
  
  // Get summary dict from config.
  var summary_dict = config.SUMMARY_DICT;
  
  // Add additional properties to config dictionary.
  summary_dict = summary_dict
      .map(utils.add_properties(bounds, SCALE_FACTOR, OUT_PROJ));
  
  // Convert to fc
  var summary_fc = ee.FeatureCollection(
      summary_dict.map(dict_to_fc).values());
  
  // Filter and mask by type.
  var categorical_masks = summary_fc
      .filterMetadata('map_mode', 'equals', 'categorical')
      .map(utils.categorical_mask);
    
  var threshold_masks = summary_fc
      .filterMetadata('map_mode', 'equals', 'threshold')
      .map(utils.threshold_mask); 
  
  var fractional_masks = summary_fc
      .filterMetadata('map_mode', 'equals', 'fractional')
      .map(utils.fractional_mask); 
  
  // Create collection of masks.
  var mask_collection = categorical_masks
      .merge(threshold_masks)
      .merge(fractional_masks);
  
  // Get summaries and format for export.
  var datasets_by_year = mask_collection
      .map(summary_table_fn)
      .map(featurify_fn)
      .sort('dataset_id');
  
  print('Results for ' + state, datasets_by_year);
  
  // --------------------- EXPORTS ---------------------
  var YEAR_FIRST = 1985;
  var YEAR_LAST = 2022;
  
  var selectors = ['dataset_id', 'state'];
  for (var i = YEAR_FIRST; i <= YEAR_LAST; ++i) {
    selectors.push(i.toString()); 
  }
  
  Export.table.toDrive({
      collection: datasets_by_year,
      selectors: selectors,
      description: 'exportTable_toDrive_' + state ,
      folder: DRIVE_DIR,
      fileNamePrefix: 'fpc_' + VERSION + '_' + state,
  });
}